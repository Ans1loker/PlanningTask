{"version":3,"sources":["TaskPlanner.js","App.js","reportWebVitals.js","index.js"],"names":["TaskList","_ref","tasks","_jsx","children","map","task","_jsxs","name","priority","status","_id","TaskPlanner","setTasks","useState","error","setError","useEffect","async","response","axios","get","data","console","fetchTasks","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"sMAGA,MA2BMA,EAAWC,IAAgB,IAAf,MAAEC,GAAOD,EACzB,OACEE,cAAA,MAAAC,SACGF,EAAMG,KAAIC,GACTC,eAAA,MAAAH,SAAA,CACGE,EAAKE,KAAK,MAAIF,EAAKG,SAAS,MAAIH,EAAKI,SAD/BJ,EAAKK,QAIb,EAIMC,MAvCKA,KAClB,MAAOV,EAAOW,GAAYC,mBAAS,KAC5BC,EAAOC,GAAYF,mBAAS,IAgBnC,OAdAG,qBAAU,KACWC,WACjB,IACE,MAAMC,QAAiBC,IAAMC,IAAI,mCACjCR,EAASM,EAASG,KACpB,CAAE,MAAOP,GACPC,EAAS,iDACTO,QAAQR,MAAM,wBAAyBA,EACzC,GAGFS,EAAY,GACX,IAGDjB,eAAA,OAAAH,SAAA,CACED,cAAA,MAAAC,SAAI,sBACHW,GAASZ,cAAA,KAAAC,SAAIW,IACdZ,cAACH,EAAQ,CAACE,MAAOA,MACb,ECdKuB,MARf,WACE,OACEtB,cAAA,OAAKuB,UAAU,MAAKtB,SAClBD,cAACS,EAAW,KAGlB,ECEee,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK7B,IAAkD,IAAjD,OAAE8B,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASlC,EACpE8B,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECHFQ,IAASC,OACPlC,cAACmC,IAAMC,WAAU,CAAAnC,SACfD,cAACsB,EAAG,MAENe,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.45b51e80.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TaskPlanner = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3001/api/tasks'); // Убедитесь, что URL правильный\r\n        setTasks(response.data);\r\n      } catch (error) {\r\n        setError('Error fetching tasks. Please try again later.');\r\n        console.error('Error fetching tasks:', error);\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>SmartTask Planner</h1>\r\n      {error && <p>{error}</p>}\r\n      <TaskList tasks={tasks} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TaskList = ({ tasks }) => {\r\n  return (\r\n    <ul>\r\n      {tasks.map(task => (\r\n        <li key={task._id}>\r\n          {task.name} - {task.priority} - {task.status}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TaskPlanner;\r\n","// src/App.js\r\nimport React from 'react';\r\nimport TaskPlanner from './TaskPlanner';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TaskPlanner />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}